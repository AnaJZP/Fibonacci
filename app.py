import pandas as pd
import streamlit as st
import numpy as np
import yfinance as yf
import plotly.graph_objects as go
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from PIL import Image
import io
import base64
import os

# Tratamos de importar el m√≥dulo de ejemplos
try:
    import ejemplos_fibonacci
    ejemplos_module_available = True
except ImportError:
    ejemplos_module_available = False

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de Retrocesos de Fibonacci",
    page_icon="üìà",
    layout="wide"
)

# T√≠tulo y descripci√≥n
st.title("üìä An√°lisis de Retrocesos de Fibonacci")
st.markdown("""
#### Dise√±ado por Ana Lorena Jim√©nez Preciado. 
##### SEPI -ESE -IPN
##### DCE - An√°lisis Burs√°til y M√©todos Algor√≠tmicos Avanzados

Esta aplicaci√≥n te permite analizar los retrocesos de Fibonacci para diferentes activos financieros.
Los retrocesos de Fibonacci son una herramienta popular en el an√°lisis t√©cnico que ayuda a identificar
posibles niveles de soporte y resistencia basados en la secuencia de Fibonacci.
""")

# Secci√≥n te√≥rica sobre Fibonacci
with st.expander("üìö Fundamentos Te√≥ricos de Fibonacci", expanded=True):
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### La Secuencia de Fibonacci
        
        La secuencia de Fibonacci es una serie de n√∫meros donde cada n√∫mero es la suma de los dos anteriores:
        
        **0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...**
        
        Matem√°ticamente:
        - F(0) = 0
        - F(1) = 1
        - F(n) = F(n-1) + F(n-2) para n > 1
        
        ### La Proporci√≥n √Åurea (Phi)
        
        Cuando dividimos cualquier n√∫mero de la secuencia por su predecesor, el resultado se aproxima a 1.618 conforme avanzamos en la serie.
        Este n√∫mero, conocido como Phi (œÜ), es la proporci√≥n √°urea:
        
        œÜ = 1.61803398875...
        
        Y su rec√≠proco:
        
        1/œÜ = 0.61803398875...
        
        ### Retrocesos de Fibonacci en Finanzas
        
        Los niveles de retroceso de Fibonacci m√°s utilizados son:
        - **0.236 (23.6%)**
        - **0.382 (38.2%)** - Derivado de la proporci√≥n 0.382 ‚âà 3/8
        - **0.5 (50%)** - Aunque no es estrictamente un n√∫mero Fibonacci, es incluido por su importancia psicol√≥gica
        - **0.618 (61.8%)** - El rec√≠proco de la proporci√≥n √°urea (1/œÜ)
        - **0.786 (78.6%)** - La ra√≠z cuadrada de 0.618
        - **1.0 (100%)**
        
        Estos niveles ayudan a identificar posibles puntos de correcci√≥n en el precio despu√©s de un movimiento significativo.
        """)
    
    with col2:
        # Generamos imagen did√°ctica de la espiral de Fibonacci
        def create_fibonacci_spiral():
            fig, ax = plt.subplots(figsize=(6, 6))
            
            # Generar secuencia Fibonacci
            fib = [0, 1]
            for i in range(2, 12):
                fib.append(fib[i-1] + fib[i-2])
            
            # Crear espiral
            phi = (1 + 5**0.5) / 2
            theta = np.linspace(0, 8 * np.pi, 1000)
            r = phi ** (theta / (np.pi/2))
            
            ax.plot(r * np.cos(theta), r * np.sin(theta), color='blue')
            ax.set_title('Espiral de Fibonacci')
            ax.axis('equal')
            ax.grid(True)
            ax.set_axis_off()
            
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            plt.close(fig)
            return buf
        
        # Mostrar la imagen
        image_buf = create_fibonacci_spiral()
        st.image(image_buf, caption="Espiral de Fibonacci", use_container_width=True)
        
        # Tabla de proporciones relevantes
        st.markdown("### Proporciones Importantes")
        proportions_data = {
            "Nivel": ["0.236", "0.382", "0.5", "0.618", "0.786", "1.0"],
            "Origen": ["Aproximado de F(n+3)/F(n+6)", "Aproximado a 3/8", "Mitad psicol√≥gica", "1/œÜ (inverso de œÜ)", "‚àö0.618", "Retroceso completo"]
        }
        st.table(pd.DataFrame(proportions_data))

# Secci√≥n de la aplicaci√≥n con m√∫ltiples p√°ginas
st.sidebar.title("Navegaci√≥n")
pages = ["An√°lisis de Retrocesos", "Ejemplos en Naturaleza y Arte"]
selected_page = st.sidebar.radio("Ir a", pages)

# Funci√≥n para mostrar ejemplos b√°sicos (respaldo)
def show_basic_examples():
    st.subheader("Ejemplos b√°sicos de Fibonacci")
    st.write("""
    Aqu√≠ tienes algunos conceptos b√°sicos sobre Fibonacci:
    
    1. La secuencia de Fibonacci: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
    2. Cada n√∫mero es la suma de los dos anteriores
    3. La proporci√≥n entre n√∫meros consecutivos se aproxima a œÜ = 1.618...
    4. Esta proporci√≥n aparece en la naturaleza, arte y mercados financieros
    """)
    
    # Crear una espiral simple como demostraci√≥n
    def create_simple_spiral():
        fig, ax = plt.subplots(figsize=(8, 8))
        theta = np.linspace(0, 8 * np.pi, 1000)
        a = 0.15
        r = a * np.exp(theta * 0.3)
        x = r * np.cos(theta)
        y = r * np.sin(theta)
        ax.plot(x, y, 'b-')
        ax.set_title("Espiral inspirada en Fibonacci")
        ax.set_aspect('equal')
        ax.grid(True, alpha=0.3)
        ax.set_axis_off()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close(fig)
        return buf
    
    st.image(create_simple_spiral(), caption="Espiral inspirada en la proporci√≥n √°urea", use_container_width=True)

# Mostrar contenido seg√∫n la p√°gina seleccionada
if selected_page == "An√°lisis de Retrocesos":
    # Secci√≥n de aplicaci√≥n pr√°ctica
    st.header("üîç Aplicaci√≥n Pr√°ctica")
    
    # Configuraci√≥n de par√°metros
    col1, col2, col3 = st.columns(3)

    with col1:
        # Opci√≥n para ingresar ticker directamente
        ticker_default = "AAPL"
        ticker = st.text_input("Ingresa el s√≠mbolo del ticker:", ticker_default, 
                              help="Ejemplos: AAPL (Apple), MSFT (Microsoft), AMZN.MX (Amazon M√©xico)")
        
        # Sugerencias de tickers populares
        st.caption("Sugerencias: AAPL, MSFT, GOOGL, META, AMZN.MX, BIMBOA.MX, SPY.MX")

    with col2:
        # Per√≠odo de tiempo
        period_options = {
            "1 mes": 30,
            "3 meses": 90,
            "6 meses": 180,
            "1 a√±o": 252,
            "2 a√±os": 504,
            "5 a√±os": 1260,
            "M√°ximo disponible": 0  # Valor especial para indicar sin l√≠mite
        }
        selected_period = st.selectbox("Selecciona el per√≠odo:", list(period_options.keys()))
        days = period_options[selected_period]

    with col3:
        # Selecci√≥n del tipo de an√°lisis
        trend_type = st.radio("Tipo de tendencia para an√°lisis:", ("Alcista", "Bajista"))

    # Cargar datos
    @st.cache_data(ttl=3600)  # Cach√© de 1 hora
    def load_data(ticker, days):
        end_date = datetime.now()
        
        # No limitamos con d√≠as espec√≠ficos al inicio, solo al final tomaremos los datos necesarios
        start_date = end_date - timedelta(days=days*3)  # Solicitamos el triple para tener suficientes datos
        
        try:
            # M√©todo recomendado con la nueva versi√≥n de yfinance
            ticker_obj = yf.Ticker(ticker)
            data = ticker_obj.history(start=start_date)
            
            # Eliminar zona horaria del √≠ndice
            if data.index.tzinfo is not None:
                data.index = data.index.tz_localize(None)
            
            # Verificar y eliminar valores nulos
            na_count = data.isna().sum().sum()
            if na_count > 0:
                st.warning(f"Se encontraron {na_count} valores NA en los datos. Se eliminar√°n autom√°ticamente.")
                data = data.dropna()
            
            if data.empty:
                return None, "No se encontraron datos para el ticker seleccionado."
                
            # Verificar que tenemos suficientes datos
            if len(data) < 30:
                st.warning("ADVERTENCIA: Pocos datos disponibles. Los resultados pueden no ser confiables.")
            
            # Si queremos limitar los d√≠as, lo hacemos aqu√≠
            if days > 0:
                data = data.tail(days)  # Nos quedamos con los d√≠as solicitados
            
            return data, None
        except Exception as e:
            return None, f"Error al cargar datos: {str(e)}"

    # Funci√≥n para calcular retrocesos de Fibonacci
    def calculate_fibonacci_levels(data, trend_type):
        try:
            if trend_type == "Alcista":
                # Para tendencia alcista, calculamos retrocesos del punto m√°s bajo al m√°s alto
                min_price = data['Low'].min()
                max_price = data['High'].max()
                min_idx = data['Low'].idxmin()
                max_idx = data['High'].idxmax()
            else:
                # Para tendencia bajista, calculamos retrocesos del punto m√°s alto al m√°s bajo
                max_price = data['High'].max()
                min_price = data['Low'].min()
                max_idx = data['High'].idxmax()
                min_idx = data['Low'].idxmin()
            
            # Verificar cronolog√≠a para determinar si el an√°lisis es relevante
            # Manejo seguro de la comparaci√≥n de fechas
            if isinstance(min_idx, pd.Series):
                min_idx_value = min_idx.iloc[0]
            else:
                min_idx_value = min_idx
                
            if isinstance(max_idx, pd.Series):
                max_idx_value = max_idx.iloc[0]
            else:
                max_idx_value = max_idx
            
            if trend_type == "Alcista":
                # Si el m√°ximo ocurre antes que el m√≠nimo en una tendencia alcista, no es v√°lido
                if max_idx_value < min_idx_value:
                    return None, "La cronolog√≠a de puntos extremos no es adecuada para el tipo de tendencia seleccionada."
            else:  # Bajista
                # Si el m√≠nimo ocurre antes que el m√°ximo en una tendencia bajista, no es v√°lido
                if min_idx_value < max_idx_value:
                    return None, "La cronolog√≠a de puntos extremos no es adecuada para el tipo de tendencia seleccionada."
            
            # Calcular los niveles de retroceso
            diff = max_price - min_price
            levels = {
                0.0: max_price if trend_type == "Bajista" else min_price,
                0.236: max_price - 0.236 * diff if trend_type == "Bajista" else min_price + 0.236 * diff,
                0.382: max_price - 0.382 * diff if trend_type == "Bajista" else min_price + 0.382 * diff,
                0.5: max_price - 0.5 * diff if trend_type == "Bajista" else min_price + 0.5 * diff,
                0.618: max_price - 0.618 * diff if trend_type == "Bajista" else min_price + 0.618 * diff,
                0.786: max_price - 0.786 * diff if trend_type == "Bajista" else min_price + 0.786 * diff,
                1.0: min_price if trend_type == "Bajista" else max_price
            }
            
            return {
                'levels': levels,
                'min_price': min_price,
                'max_price': max_price,
                'min_idx': min_idx,
                'max_idx': max_idx
            }, None
        except Exception as e:
            return None, f"Error al calcular niveles de Fibonacci: {str(e)}"

    # Configuraci√≥n avanzada en la barra lateral
    st.sidebar.header("Configuraci√≥n Avanzada")
    show_volume = st.sidebar.checkbox("Mostrar volumen en gr√°fico", value=False)
    extended_levels = st.sidebar.checkbox("Mostrar niveles de extensi√≥n (1.272, 1.618)", value=False)

    # Cargar datos cuando se hace clic en el bot√≥n
    if st.button("Analizar"):
        with st.spinner("Cargando datos y calculando retrocesos..."):
            try:
                data, error = load_data(ticker, days)
                
                if error:
                    st.error(error)
                else:
                    st.subheader(f"An√°lisis de {ticker} - √öltimos {days} d√≠as")
                    
                    # Mostrar informaci√≥n b√°sica
                    col1, col2, col3 = st.columns(3)
                    # Corregir el formato de string para evitar el error
                    precio_actual = float(data['Close'].iloc[-1])
                    cambio_precio = float(data['Close'].iloc[-1] - data['Close'].iloc[-2])
                    precio_max = float(data['High'].max())
                    precio_min = float(data['Low'].min())
                    
                    col1.metric("Precio Actual", f"${precio_actual:.2f}", f"{cambio_precio:.2f}")
                    col2.metric("M√°ximo Per√≠odo", f"${precio_max:.2f}")
                    col3.metric("M√≠nimo Per√≠odo", f"${precio_min:.2f}")
                    
                    # Calcular niveles de Fibonacci
                    fib_data, fib_error = calculate_fibonacci_levels(data, trend_type)
                    
                    if fib_error:
                        st.warning(fib_error)
                    else:
                        # Visualizar con plotly
                        fig = go.Figure()
                        
                        # Preparar datos para el gr√°fico de velas
                        dates = list(data.index)
                        open_values = list(data['Open'])
                        high_values = list(data['High'])
                        low_values = list(data['Low'])
                        close_values = list(data['Close'])
                        
                        # Agregar gr√°fico de velas
                        fig.add_trace(go.Candlestick(
                            x=dates,
                            open=open_values,
                            high=high_values,
                            low=low_values,
                            close=close_values,
                            name="Precio",
                            increasing_line_color='green',
                            decreasing_line_color='red'
                        ))
                        
                        # Agregar l√≠neas de retroceso de Fibonacci
                        colors = ['red', 'orange', 'gold', 'green', 'blue', 'purple', 'magenta']
                        levels = fib_data['levels']
                        
                        for i, (ratio, price) in enumerate(levels.items()):
                            # Asegurarse de que 'price' sea un valor escalar
                            if isinstance(price, pd.Series):
                                price_value = float(price.iloc[0])
                            else:
                                price_value = float(price)
                            
                            # Asegurarse de que 'ratio' sea un valor escalar    
                            if isinstance(ratio, pd.Series):
                                ratio_value = float(ratio.iloc[0])
                            else:
                                ratio_value = float(ratio)
                            
                            fig.add_hline(
                                y=price_value,  # Usar el valor escalar
                                line_dash="dash",
                                line_color=colors[i],
                                annotation_text=f"Retroceso {ratio_value*100:.1f}%: ${price_value:.2f}",
                                annotation_position="right"
                            )
                        
                        # Convertir valores extremos a escalares si son Series
                        min_price_value = float(fib_data['min_price']) if isinstance(fib_data['min_price'], pd.Series) else float(fib_data['min_price'])
                        max_price_value = float(fib_data['max_price']) if isinstance(fib_data['max_price'], pd.Series) else float(fib_data['max_price'])
                        
                        # Para los √≠ndices, mantenerlos como est√°n si son fechas que Plotly puede manejar
                        min_idx_value = fib_data['min_idx']
                        max_idx_value = fib_data['max_idx']
                        
                        # Resaltar puntos extremos
                        fig.add_trace(go.Scatter(
                            x=[min_idx_value, max_idx_value],
                            y=[min_price_value, max_price_value],
                            mode='markers',
                            marker=dict(size=12, color='red'),
                            name='Puntos Extremos'
                        ))
                        
                        # Configurar gr√°fico
                        fig.update_layout(
                            title=f"Retrocesos de Fibonacci para {ticker} - Tendencia {trend_type}",
                            xaxis_title="Fecha",
                            yaxis_title="Precio",
                            height=600,
                            xaxis_rangeslider_visible=False,
                            hovermode='x unified',
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1
                            ),
                            plot_bgcolor='white',
                            xaxis=dict(showgrid=True, gridcolor='lightgray'),
                            yaxis=dict(showgrid=True, gridcolor='lightgray')
                        )
                        
                        # Opcional: mostrar volumen si est√° activado
                        if show_volume:
                            volume_data = list(data['Volume'])
                            colors = ['green' if close_values[i] > open_values[i] else 'red' 
                                    for i in range(len(close_values))]
                            
                            fig.add_trace(go.Bar(
                                x=dates,
                                y=volume_data,
                                name="Volumen",
                                marker_color=colors,
                                opacity=0.3,
                                yaxis="y2"
                            ))
                            
                            fig.update_layout(
                                yaxis2=dict(
                                    title="Volumen",
                                    overlaying="y",
                                    side="right",
                                    showgrid=False
                                )
                            )
                        
                        # Opcional: mostrar niveles de extensi√≥n si est√° activado
                        if extended_levels:
                            # A√±adir niveles de extensi√≥n: 1.272 y 1.618
                            extension_levels = {}
                            diff = max_price_value - min_price_value
                            
                            if trend_type == "Alcista":
                                extension_levels[1.272] = min_price_value + 1.272 * diff
                                extension_levels[1.618] = min_price_value + 1.618 * diff
                            else:  # Bajista
                                extension_levels[1.272] = max_price_value - 1.272 * diff
                                extension_levels[1.618] = max_price_value - 1.618 * diff
                            
                            # A√±adir las l√≠neas de extensi√≥n
                            for ratio, price in extension_levels.items():
                                fig.add_hline(
                                    y=price,
                                    line_dash="dot",
                                    line_color="darkblue",
                                    annotation_text=f"Extensi√≥n {ratio:.3f}: ${price:.2f}",
                                    annotation_position="left"
                                )
                        
                        # Mostrar el gr√°fico
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Tabla de niveles de retroceso
                        st.subheader("Niveles de Retroceso de Fibonacci")
                        
                        # Crear listas para la tabla asegurando que los valores sean escalares
                        nivel_list = []
                        precio_list = []
                        
                        for ratio, price in levels.items():
                            # Convertir a float para asegurar formateo correcto
                            ratio_value = float(ratio) if isinstance(ratio, pd.Series) else float(ratio)
                            price_value = float(price) if isinstance(price, pd.Series) else float(price)
                            
                            nivel_list.append(f"{ratio_value*100:.1f}%")
                            precio_list.append(f"${price_value:.2f}")
                        
                        # Crear DataFrame con las listas ya formateadas
                        fib_table = pd.DataFrame({
                            "Nivel": nivel_list,
                            "Precio": precio_list
                        })
                        
                        st.table(fib_table)
                        
                        # Explicaci√≥n de resultados
                        st.subheader("Interpretaci√≥n de Resultados")
                        
                        # Convertir valores a escalares para evitar problemas de formateo
                        min_price_value = float(fib_data['min_price']) if isinstance(fib_data['min_price'], pd.Series) else float(fib_data['min_price'])
                        max_price_value = float(fib_data['max_price']) if isinstance(fib_data['max_price'], pd.Series) else float(fib_data['max_price'])
                        
                        # Formatear fechas correctamente
                        try:
                            if isinstance(fib_data['min_idx'], pd.Series):
                                min_idx_str = fib_data['min_idx'].iloc[0].strftime('%d/%m/%Y')
                            else:
                                min_idx_str = fib_data['min_idx'].strftime('%d/%m/%Y')
                                
                            if isinstance(fib_data['max_idx'], pd.Series):
                                max_idx_str = fib_data['max_idx'].iloc[0].strftime('%d/%m/%Y')
                            else:
                                max_idx_str = fib_data['max_idx'].strftime('%d/%m/%Y')
                        except Exception as e:
                            # Si hay un error al formatear fechas, usar formato alternativo
                            min_idx_str = str(fib_data['min_idx'])
                            max_idx_str = str(fib_data['max_idx'])
                            st.warning(f"Nota: Formato de fecha simplificado debido a: {str(e)}")
                        
                        st.markdown(f"""
                        ### An√°lisis para {ticker} - Tendencia {trend_type}
                        
                        En este an√°lisis hemos identificado:
                        
                        - **Punto m√≠nimo**: ${min_price_value:.2f} el {min_idx_str}
                        - **Punto m√°ximo**: ${max_price_value:.2f} el {max_idx_str}
                        
                        #### ¬øC√≥mo interpretar estos niveles?
                        
                        - Los niveles de retroceso de Fibonacci act√∫an como posibles zonas de soporte (en tendencia alcista) o resistencia (en tendencia bajista)
                        - El nivel 0.618 (61.8%) es especialmente significativo por su relaci√≥n con la proporci√≥n √°urea
                        - El nivel 0.5 (50%) tiene importancia psicol√≥gica en el mercado
                        - Observa c√≥mo el precio interact√∫a con estos niveles para confirmar su validez
                        
                        #### Aplicaci√≥n pr√°ctica:
                        
                        - En una **tendencia alcista**, los traders buscan oportunidades de compra en retrocesos hacia estos niveles
                        - En una **tendencia bajista**, los traders buscan oportunidades de venta en rebotes hacia estos niveles
                        - La confluencia con otros indicadores t√©cnicos aumenta la relevancia de un nivel de Fibonacci
                        """)
            except Exception as e:
                st.error(f"Ha ocurrido un error inesperado: {str(e)}")
                st.write("Detalles para depuraci√≥n:", e)

    # Secci√≥n de aplicaciones avanzadas
    with st.expander("üß† Aplicaciones Avanzadas", expanded=False):
        st.markdown("""
        ### Estrategias Utilizando Retrocesos de Fibonacci
        
        1. **Estrategia de Continuaci√≥n de Tendencia**:
           - Identificar una tendencia clara
           - Esperar un retroceso a los niveles de Fibonacci (especialmente 0.382, 0.5 o 0.618)
           - Entrar en la direcci√≥n de la tendencia original cuando el precio muestre se√±ales de respeto al nivel
        
        2. **Estrategia de Confirmaci√≥n con Velas Japonesas**:
           - Buscar patrones de velas espec√≠ficos (como pinzas, martillos, estrellas del atardecer) en los niveles de Fibonacci
           - Estos patrones act√∫an como confirmaci√≥n adicional para entradas
        
        3. **Estrategia de Confluencia**:
           - Combinar los niveles de Fibonacci con otros indicadores t√©cnicos como:
             - Medias m√≥viles
             - RSI (√çndice de Fuerza Relativa)
             - Soportes/resistencias horizontales
             - Patrones chartistas
        
        4. **Colocaci√≥n de Stop Loss y Take Profit**:
           - Stop Loss: Justo debajo/encima del nivel de Fibonacci que est√° siendo probado
           - Take Profit: En el siguiente nivel de extensi√≥n de Fibonacci (1.272, 1.618, etc.)
        
        ### Limitaciones a Considerar
        
        - Los retrocesos de Fibonacci funcionan mejor en mercados con tendencias claras
        - Son herramientas de probabilidad, no de certeza
        - Pueden generar falsos positivos, especialmente en mercados laterales
        - El sesgo de confirmaci√≥n puede llevar a interpretar incorrectamente los resultados
        """)

    # Secci√≥n de ejercicios pr√°cticos para estudiantes
    with st.expander("‚úèÔ∏è Ejercicios Pr√°cticos", expanded=False):
        st.markdown("""
        ### Ejercicio 1: Identificaci√≥n de Niveles
        
        1. Selecciona tres diferentes activos financieros
        2. Identifica una tendencia alcista clara en los √∫ltimos 6 meses
        3. Traza los niveles de retroceso de Fibonacci
        4. Responde:
           - ¬øQu√© nivel de Fibonacci respet√≥ el precio con mayor frecuencia?
           - ¬øCu√°ntos retrocesos complet√≥ el precio antes de continuar su tendencia?
        
        ### Ejercicio 2: Comparaci√≥n de Efectividad
        
        1. Selecciona un activo financiero
        2. Analiza los retrocesos de Fibonacci en tres diferentes per√≠odos de tiempo (1 mes, 6 meses, 1 a√±o)
        3. Compara la efectividad de los niveles en cada per√≠odo
        4. ¬øEn qu√© plazo temporal los niveles de Fibonacci parecen ser m√°s efectivos?
        
        ### Ejercicio 3: Estrategia de Trading
        
        1. Dise√±a una estrategia de trading simple usando retrocesos de Fibonacci
        2. Define reglas claras para:
           - Entrada
           - Stop Loss
           - Take Profit
        3. Prueba tu estrategia en datos hist√≥ricos (backtesting manual)
        4. Calcula la relaci√≥n riesgo/beneficio y la tasa de √©xito
        """)

elif selected_page == "Ejemplos en Naturaleza y Arte":
    # Si el m√≥dulo de ejemplos est√° disponible, lo usamos
    if ejemplos_module_available:
        ejemplos_fibonacci.app()
    else:
        # Funci√≥n alternativa si el m√≥dulo no est√° disponible
        show_basic_examples()

# Informaci√≥n del autor
st.sidebar.header("Informaci√≥n")
st.sidebar.info("""
Esta herramienta did√°ctica fue dise√±ada para el aprendizaje de los retrocesos de Fibonacci en mercados financieros.

**Aplicaci√≥n:**
- Experimenta con diferentes activos y per√≠odos
- Compara resultados entre diferentes mercados
- Complementa tu an√°lisis con otros indicadores t√©cnicos
""")

# Enlaces √∫tiles
st.sidebar.header("Recursos Adicionales")
st.sidebar.markdown("""
- [Teor√≠a de Ondas de Elliott y Fibonacci](https://www.investopedia.com/articles/technical/111401.asp)
- [Patrones de velas japonesas](https://www.investopedia.com/trading/candlestick-charting-what-is-it/)
- [Estrategias de trading con Fibonacci](https://www.babypips.com/learn/forex/fibonacci-retracement)
""")

# Pie de p√°gina
st.markdown("""
---
Desarrollado con fines educativos | Ana Lorena Jim√©nez Preciado
""")